map $uri $namespace {
    "~*/topics/\d{3}-\d(?:-\d{3}-\d)?\.([a-z0-9-]+)\..+$"  $1;
    default      'unmatched';
}

server {
    #listen 443 ssl http2;
    listen 80;
    
    vhost_traffic_status_filter_by_set_key $host $namespace;
    # send all requests to the `/validate` endpoint for authorization

    location = /auth {
        internal;
        # https://docs.docker.com/docker-for-mac/networking/
        # proxy_pass http://host.docker.internal:8080;
        proxy_pass http://ra:8080;
        proxy_pass_request_body     off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Original-Method $request_method;
        proxy_set_header X-Service "kafka-rest";
      }

      location @error403 {
        add_header "X-Request-ID" "$x_request_id" always;
        return 403 "Error: $ra_error\n";
      }

      location / {
        auth_request /auth;
        #auth_basic "Restricted Area";
        #auth_basic_user_file /etc/nginx/kafka_htpasswd;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        auth_request_set $ra_error $upstream_http_x_ra_error;
        auth_request_set $x_request_id $upstream_http_x_request_id;
        error_page 403 = @error403;
        #auth_request_set $auth_status $upstream_http_x_request_id;
        add_header X-Request-ID "$x_request_id" always;
        proxy_pass http://rest-proxy:8082;
      }
}
